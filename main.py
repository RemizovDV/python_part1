#Welcome to GDB Online.
#GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
#C, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
#Code, Compile, Run and Debug online from anywhere in world.


print('Задача1:')
print('# Дан список фруктов.')
print('Напишите программу, выводящую фрукты в виде нумерованного списка,')
# выровненного по правой стороне.
# Пример:
# Дано: ["яблоко", "банан", "киви", "арбуз"]
# Вывод:
# 1. яблоко
# 2. банан
# 3. киви
# 4. арбуз
# Подсказка: воспользоваться методом .format()
# Решение в виде списка, как переменной.
import math
import random
from math import sqrt

Spisok = ['Яблоко', 'Банан', 'Киви', 'Арбуз', 'Морковь', 'Персик', 'Ананас', 'Абрикос']
DlinaSpisok = len(Spisok)
for i in range(len(Spisok)):
    print(str(i + 1) + '.' + '{:>10}'.format(Spisok[i]))




print('Даны два произвольные списка.')
print('Удалите из первого списка элементы, присутствующие во втором списке.')

First = {'12', 'max', 'min', 'aver', 'nul', 'disp', '14'}
Second = {'12', '14'}
print('first list',First)
print('Second list',Second)
Third = First - Second
print(list(Third))

# Задача-3:
# Дан произвольный список из целых чисел.
# Получите НОВЫЙ список из элементов исходного, выполнив следующие условия:
# если элемент кратен двум, то разделить его на 4, 
#если не кратен, то умножить на два.
First = [4,8,16,32,64,128,1,3,5,7]
print('исходный список',First)
Second = []
last_name = len(First)
for i in range(last_name):
    if First[i] % 2 == 0:
         Second.append(First[i] / 4)
    else:
        Second.append(First[i] * 2)
print('После преобразования',Second)


# Normal

# Задача-1:
print('Дан список, заполненный произвольными целыми числами, получите новый список,')
print('# элементами которого будут квадратные корни элементов исходного списка,')
print('# но только если результаты извлечения корня не имеют десятичной части и')
print('# если такой корень вообще можно извлечь')
# Пример: Дано: [2, -5, 8, 9, -25, 25, 4] Результат: [3, 5, 2]
# Решение №1
First = [2, -5, 8, 9, -25, 25, 4,64,121,120]
Second = []
for item in First:
    if item > 0 and sqrt(item) % 1 == 0:
        Second.append(int(sqrt(item)))
print('Исходный',First)
print('Результат',Second)


print('Задача-2: Дана дата в формате dd.mm.yyyy, например: 01.12.2018.')
print('# Ваша задача вывести дату в текстовом виде, например: первое декабря 2018 года.')
# Склонением пренебречь (2000 года, 2010 года)
# Пусть дана дата 01.01.2000
ish_Data = '01.12.2018'
Data_list = ish_Data.split('.')
Dict_Mesyac = {
'01': 'Января',
'02': 'Февраля',
'03': 'Марта',
'04': 'Апреля',
'05': 'Мая',
'06': 'Июня',
'07': 'Июля',
'08': 'Августа',
'09': 'Сентября',
'10': 'Октября',
'11': 'Ноября',
'12': 'декабря',
}
Dict_Day = {
'01': 'первое',
'02': 'второе',
'03': 'третье',
'04': 'четвёртое',
'05': 'пятое',
'06': 'шестое',
'07': 'седьмое',
'08': 'восьмое',
'09': 'девятое',
'10': 'десятое',
'11': 'одиннадцатое',
'12': 'двенадцатое',
'13': 'тринадцатое',
'14': 'четырнадцатое',
'15': 'пятнадцатое',
'16': 'шестнадцатое',
'17': 'семнадцатое',
'18': 'восемнадцатое',
'19': 'девятнадцатое',
'20': 'двадцатое',
'21': 'двадцать первое',
'22': 'двадцать второе',
'23': 'двадцать третье',
'24': 'двадцать четвёртое',
'25': 'двадцать пятое',
'26': 'двадцать шестое',
'27': 'двадцать седьмое',
'28': 'двадцать восьмое',
'29': 'двадцать девятое',
'30': 'тридцатое',
'31': 'тридцать первое',
}
for key in Dict_Day:
    if Data_list[0] == key:
        Data_list[0] = Dict_Day[key]
for key in Dict_Mesyac:
    if Data_list[1] == key:
        Data_list[1] = Dict_Mesyac[key]

Data_prop = Data_list[0] + ' ' + Data_list[1] + ' ' + Data_list[2] + ' ' "года"
print(Data_prop)

print('# Задача-3: Напишите алгоритм, заполняющий список произвольными целыми числами')
print('# в диапазоне от -100 до 100. В списке должно быть n - элементов.')
# Подсказка:
# для получения случайного числа используйте функцию randint() модуля random
n = int(input('Введите количество элементов в списке: '))
Firt = []
for el in range(n):
    First.append(random.randint(-100, 100))
print('список',First)


# Задача-4: Дан список, заполненный произвольными целыми числами.
# Получите новый список, элементами которого будут:
# а) неповторяющиеся элементы исходного списка:
# например, lst = [1, 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 2, 4, 5, 6]
# б) элементы исходного списка, которые не имеют повторений:
# например, lst = [1 , 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 4, 6]

First_list = [1, 2, 4, 10, 5, 6, 2, 5, 1, 10, 8]
Second_list = set(First_list)
print('Результат',First_list)
print('Результат',Second_list)







# Задание-2: Дата задана в виде строки формата 'dd.mm.yyyy'. 
# Проверить, корректно ли введена дата. 
# Условия корректности: 
# 1. День должен приводиться к целому числу в диапазоне от 1 до 30(31) 
# (в зависимости от месяца, февраль не учитываем) 
# 2. Месяц должен приводиться к целому числу в диапазоне от 1 до 12 
# 3. Год должен приводиться к целому положительному числу в диапазоне от 1 до 9999 
# 4. Длина исходной строки для частей должна быть в соответствии с форматом 
# (т.е. 2 символа для дня, 2 - для месяца, 4 - для года) 
# Пример корректной даты 
# date = '01.11.1985' 
# Примеры некорректных дат 
# date = '01.22.1001' 
# date = '1.12.1001' 
# date = '-2.10.3001' 
my_date = input('Введите дату через точку: ') 
converted_date = my_date.split('.') 
converted_day = int(converted_date[0]) 
converted_month = int(converted_date[1]) 
converted_year = int(converted_date[2]) 
long_month = [1, 3, 5, 7, 8, 10, 12] 
if len(converted_date[0]) != 2 or len(converted_date[1]) != 2 or len(converted_date[2]) != 4: 
    print('Некорректен формат даты') 
elif converted_day > 31 or converted_day < 1: 
    print('Введён некорректный день') 
elif converted_month > 12 or converted_month < 1: 
    print('Введён некорректный месяц') 
elif converted_year > 9999 or converted_year < 1: 
    print('Введён некорректный год') 
elif converted_month not in long_month and converted_day > 30: 
    print('Введён некорректный день') 
else: 
    print('Дата введена корректно: ', my_date)


